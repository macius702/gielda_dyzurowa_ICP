type DutySlot = record {
  status : DutyStatus;
  hospital_id : nat32;
  assigned_doctor_id : opt nat32;
  currency : opt text;
  end_date_time : int64;
  price_to : opt float64;
  required_specialty : nat16;
  start_date_time : int64;
  price_from : opt float64;
};
type DutyStatus = variant { pending; open; filled };
type RawHttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type RawHttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  upgrade : opt bool;
  status_code : nat16;
};
type Result = variant { Ok : record { nat32; text }; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok; Err : text };
type User = record {
  localization : opt text;
  username : text;
  password : text;
  role : UserRole;
  email : opt text;
  specialty : opt nat16;
  phone_number : opt text;
};
type UserRole = variant { hospital; doctor };
service : {
  delete_all_duty_slots : () -> ();
  delete_all_users : () -> ();
  get_all_duty_slots : () -> (vec DutySlot) query;
  get_all_usernames : () -> (vec text) query;
  get_all_users : () -> (vec User) query;
  get_specialties : () -> (vec text) query;
  get_user_data : (text) -> (Result) query;
  http_request : (RawHttpRequest) -> (RawHttpResponse) query;
  http_request_update : (RawHttpRequest) -> (RawHttpResponse);
  insert_duty_slot : (DutySlot) -> (nat32);
  insert_user : (User) -> (nat32);
  perform_login : (text, text) -> (Result_1) query;
  perform_logout : (text) -> (Result_2) query;
  perform_registration : (text, text, UserRole, opt int32, opt text) -> (nat32);
}
